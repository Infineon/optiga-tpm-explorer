-> As of this guide, the RASPBIAN kernel Version is v5.10.92-v7l+
(check using the command: uname -a)

-> tpm2-tss version is commit e237e4d33cbf280292a480edd8ad061dcd3a37a2. Version tag is 3.2.0.

-> tpm2-tools version is the commit with the hash ebd59ef827f1fc8e0efa43f9cade4d3d7efee59a. Version tag is 5.2.

-> tpm2-abrmd version is the commit with the hash 71bfb9457267683e1f6a6dea42622442a62203a5. Version tag is 2.4.1.

-> tpm2-tss-engine version is the commit with the hash 6f387a4efe2049f1b4833e8f621c77231bc1eef4. Version tag is v1.1.0.


Step-by-step guide to setting up the Trusted Platform Module (TPM) on a Raspberry Pi

Note: RaspberryPi 3 comes with Wifi functionality, older versions do not

1.  Install NOOBS/RASPBIAN
  1.1. During setup, DO NOT update your OS

2. Build kernel
  2.1. Go to https://www.raspberrypi.org/documentation/linux/kernel/building.md
  2.2. sudo apt-get install git bc
  2.3. git clone --depth=1 https://github.com/raspberrypi/linux
  2.4. cd linux (or wherever your kernel directory is)
  2.5. KERNEL=kernel7
  2.6. Configure your kernel with the TPM drivers
    2.6.1. sudo apt-get install libncurses5-dev
    2.6.2. make menuconfig
    2.6.3. Go Device drivers ->Character devices -> TPM hardware support
    2.6.4. Activate the first 2 values, TPM Interface Specification 1.2 and 1.3 Interface
    (NOT the ones with I2C Atmel/Infineon/Nuvoton)
    2.6.5. Exit and save changes
  2.7. make bcm2709_defconfig
  2.8. make -j4 zImage modules dtbs (takes a long while, so grab a cuppa)
  2.9. sudo make modules install
  2.10. sudo cp arch/arm/boot/dts/*.dtb /boot/
        sudo cp arch/arm/boot/dts/overlays/*.dtb* /boot/overlays/
        sudo cp arch/arm/boot/dts/overlays/README /boot/overlays/
        sudo cp arch/arm/boot/zImage /boot/$KERNEL.img
  2.11. Edit the config.txt in /boot/
    2.11.1. gksudo geany config.txt
    2.11.2. At the end of the text file, add this line:
    "dtoverlay=tpm-slb9670" without the inverted commas of course
  2.12. sudo reboot
  2.13. Check in the /dev/, if tpm0 and tpmrm0 exists. If so, you're done for this part.

  3. Install tpm2-tss
    3.1. git clone from https://github.com/tpm2-software/tpm2-tss
    3.2. Install dependencies as stated in INSTALL.md
    3.3. Do the standard:
    ./bootstrap
	extra steps to get the latest package    
	-->	wget http://ftpmirror.gnu.org/autoconf-archive/autoconf-archive-2019.01.06.tar.xz
	 	cp autoconf-archive-2019.01.06/m4/ax_code_coverage.m4 m4/
	  	cp autoconf-archive-2019.01.06/m4/ax_is_release.m4 m4/
	 	cp autoconf-archive-2019.01.06/m4/ax_prog_doxygen.m4 m4/
	-->	sudo apt-get install libjson-c-dev
 
    ./configure --with-udevrulesdir=/etc/udev/rules.d --prefix=/usr
    make -j$(nproc)
    sudo make install
    3.4. Additional commands post install:
    sudo udevadm control --reload-rules && sudo udevadm trigger
    sudo ldconfig

  4. Install tpm2-tools
    4.1. git clone from https://github.com/tpm2-software/tpm2-tools
    4.2. Install dependencies as stated in INSTALL.md (including pandoc)
    4.3. Do the standard:
    ./bootstrap
    ./configure --prefix=/usr
    make -j$(nproc)
    sudo make install

  5. Install tpm2-abrmd
    5.1. Git clone from https://github.com/tpm2-software/tpm2-abrmd/
    5.2. Install remaining dependencies by using:
      5.2.1. For d-bus1 library:
      sudo apt-get install libdbus-1-dev
      5.2.2. For glib 2.0 library:
      sudo apt-get install libglib2.0-dev
    5.3. sudo useradd --system --user-group tss
    5.4. Do the standard:
    ./bootstrap
    ./configure --with-dbuspolicydir=/etc/dbus-1/system.d --with-udevrulesdir=/usr/lib/udev/rules.d --with-systemdsystemunitdir=/usr/lib/systemd/system --libdir=/usr/lib --prefix=/usr
    make -j$(nproc)
    sudo make install
    5.5. Do post-install commands:
    sudo ldconfig
    sudo pkill -HUP dbus-daemon
    systemctl daemon-reload
    5.6. Test to see if installation works:
      5.6.1. dbus-send --system --dest=org.freedesktop.DBus --type=method_call --print-reply /org/freedesktop/DBus org.freedesktop.DBus.ListNames
        There should be an output array, with one of the contents being:
        string "com.intel.tss2.Tabrmd"
    5.7. sudo chgrp tss /dev/tpm*
    This is to ensure that both tpm0 and tpmrm0 are owned by the group tss (and also owner set to tss)

6. Install tpm2-tss-engine
  6.1. git clone from https://github.com/tpm2-software/tpm2-tss-engine
  6.2. No special additional information, just follow the install instructions on the INSTALL.md

7. To run the UI, open an instance of bash, navigate to the folder containing the UI (or open a terminal from there).
  7.1. Run "python main.py"



The UI is assembled like this:
-> Main menu is defined in the main.py file.
-> The supporting functions are defined in the shell_util.py
-> All pop-ups and minor windows are handled in the misc_dialogs.py
-> All information pop-ups are in info_dialogs.py
-> Each of the 6 buttons in the main menu will each lead to a new window. Each window is handled by their own python file.
-> All images are in /images.
-> Old reference code is in /ReferenceGUI

NOTE!!! tab3_engine client/server parts are not done! RNG is done though.

Also for any wxPython functions that you don't understand, please refer to the online documentation at https://docs.wxpython.org/.

Additionally, it is advised to understand how the BoxSizers work.
I have placed sizers inside other sizers and etc. 
wx.BoxSizer(wx.VERTICAL) indicates that the elements inside the sizer (including other sizers) are placed from top to bottom, vertically.
wx.BoxSizer(wx.HORIZONTAL) indicates that the elements inside the sizer (including other sizers) are placed from left to right.
Note that the arrangement directly depends on the immediate parent, not any other.

E.g. If: Sizer1 (vertical) contains Sizer2 (horizontal), which in turn contains Sizer3 (vertical),
elements in side Sizer1 (and sizer 2 itself) are arranged vertically.
BUT elements inside sizer2 (and sizer 3 itself) are arranged horizontally.
